{"version":3,"sources":["../../src/template/base.js"],"names":[],"mappings":"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","file":"base.js","sourcesContent":["\nexport default class BaseTemplate {\n  /**\n   * constructor\n   * @return {[type]} []\n   */\n  constructor() {\n\n  }\n  /**\n   * has output\n   * @return {Boolean} []\n   */\n  hasOutput() {\n    return false;\n  }\n  /**\n   * check text has tpl\n   * @param  {String} ld   []\n   * @param  {String} rd   []\n   * @param  {String} text []\n   * @return {Boolean}      []\n   */\n  hasTpl(text, ld, rd) {\n    return text.indexOf(ld) > -1 && text.indexOf(rd) > -1;\n  }\n\n  /**\n   * get tpl matched\n   * @param  {Object} lexer []\n   * @return {Object}       []\n   */\n  _getMatched(start, end, tokenizeInstance, options = {\n    multiComment: false, // multi line comment\n    lineComment: false, // line comment\n    ignoreEnd: false, // ignore right delemiter\n    nest: false, // allow nest delimiter\n    quote: false // quote\n  }) {\n    if (!tokenizeInstance.lookAt(start)) {\n      return false;\n    }\n    tokenizeInstance.record();\n    let startLength = start.length, endLength = end.length;\n    let pos = tokenizeInstance.find(end, startLength), ret = '';\n    // can't find end string in text\n    if (pos === -1) {\n      // can ignore end chars, etc: php can ignore ?>\n      if (options.ignoreEnd) {\n        ret = tokenizeInstance.text.slice(tokenizeInstance.pos);\n        tokenizeInstance.pos = tokenizeInstance.length;\n        return ret;\n      }\n      return false;\n    }\n    ret = tokenizeInstance.forward(startLength);\n    let nums = 0, chr, code, nextCode;\n    let nest = options.nest, quote = options.quote, escape = false;\n    const multiComment = options.multiComment;\n    let lineComment = options.lineComment, comment;\n    while (tokenizeInstance.pos < tokenizeInstance.length) {\n      chr = tokenizeInstance.text[tokenizeInstance.pos];\n      code = chr.charCodeAt(0);\n      if (tokenizeInstance.lookAt(end)) {\n        ret += tokenizeInstance.forward(endLength);\n        if (!nest || nums === 0) {\n          return ret;\n        }\n        nums--;\n        continue;\n      } else if (nest && tokenizeInstance.lookAt(start)) {\n        ret += tokenizeInstance.forward(startLength);\n        nums++;\n        continue;\n      }\n      code = tokenizeInstance.text.charCodeAt(tokenizeInstance.pos);\n      // quote char\n      if (quote) {\n        if (code === 0x5c || escape) {\n          escape = !escape;\n          ret += tokenizeInstance.next();\n          continue;\n        } else if (!escape && (code === 0x22 || code === 0x27)) {\n          ret += tokenizeInstance.getQuote({\n            rollback: true,\n            escape: true\n          }).value;\n          continue;\n        }\n      }\n      // comment\n      if (code === 0x2f) { // /\n        nextCode = tokenizeInstance.text.charCodeAt(tokenizeInstance.pos + 1);\n        comment = '';\n        if (multiComment && nextCode === 0x2a) {\n          comment = tokenizeInstance.getCommentToken(1, false);\n        } else if (lineComment && nextCode === 0x2f) {\n          comment = tokenizeInstance.getCommentToken(0, false);\n        }\n        if (comment) {\n          ret += comment.value;\n          continue;\n        }\n      }\n      ret += tokenizeInstance.next();\n    }\n    if (nums !== 0 && !options.ignoreEnd) {\n      return tokenizeInstance.error(`get matched string ${start} & ${end} error`, true);\n    }\n    return ret;\n  }\n  /**\n   * get template matched\n   */\n  getMatched(ld, rd, tokenizeInstance) {\n    return this._getMatched(ld, rd, tokenizeInstance);\n  }\n  /**\n   * compress tpl token\n   */\n  compress(token/*, tokenizeInstance */) {\n    return token;\n  }\n}\n"]}