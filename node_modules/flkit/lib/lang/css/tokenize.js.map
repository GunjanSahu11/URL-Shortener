{"version":3,"sources":["../../../src/lang/css/tokenize.js"],"names":[],"mappings":"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","file":"tokenize.js","sourcesContent":["import BaseTokenize from '../../util/tokenize.js';\nimport TokenType from '../../util/token_type.js';\nimport {comments} from '../../util/config.js';\nimport SelectorTokenize from './selector_tokenize.js';\n// import Message from '../../util/message.js';\nimport {isHackChar} from './util.js';\nimport {atType} from './config.js';\n\nconst multiComment = comments[1];\n\n/**\n * status\n */\nconst STATUS = {\n  SELECTOR: 0,\n  PROPERTY: 1\n};\n\n/**\n * css tokenize\n */\nexport default class CssTokenize extends BaseTokenize {\n  /**\n   * constructor\n   *\n   */\n  constructor(text, options = {\n    parseSelector: false\n  }) {\n    super(text, options);\n    this.prevToken = {};\n    this.status = STATUS.SELECTOR;\n    this.skipCd();\n  }\n  /**\n   * get next token\n   * @return {void} []\n   */\n  getNextToken() {\n    this.skipWhiteSpace();\n    this.skipComment();\n    this.startToken();\n    if (this.pos >= this.length) {\n      return this.getLastToken();\n    }\n\n    const token = this.getTplToken();\n    if (token) {\n      return token;\n    }\n    if (this.lookAt(multiComment[0] + '!')) {\n      const value = this.getMatched(multiComment[0] + '!', multiComment[1]);\n      return this.getToken(TokenType.RESERVED_COMMENT, value);\n    }\n    const type = this.prevToken.type;\n    const code = this._text.charCodeAt(this.pos);\n    switch (code) {\n      case 0x40: // @\n        return this.getAtToken();\n      case 0x7b: // {\n        if (type === TokenType.CSS_SELECTOR) {\n          this.status = STATUS.PROPERTY;\n        }\n        return this.getToken(TokenType.CSS_LEFT_BRACE, this.next());\n      case 0x7d: // }\n        this.status = STATUS.SELECTOR;\n        const token1 = this.getToken(TokenType.CSS_RIGHT_BRACE, this.next());\n        this.prevToken = token1;\n        return token1;\n      case 0x3a: // :\n        if (type === TokenType.CSS_PROPERTY ||\n            type === TokenType.CSS_SELECTOR ||\n            type === TokenType.CSS_VALUE ||\n            type === TokenType.CSS_COLON) {\n          const token = this.getToken(TokenType.CSS_COLON, this.next());\n          this.prevToken = token;\n          return token;\n        }\n        break;\n      case 0x3b: // ;\n        const token = this.getToken(TokenType.CSS_SEMICOLON, this.next());\n        this.prevToken = token;\n        return token;\n      case 0x5b: // [\n        if (type === TokenType.CSS_SELECTOR ||\n            type === TokenType.CSS_VALUE ||\n            type === TokenType.CSS_SEMICOLON) {\n          // for hack [;color: red;]\n          const ret = this.getMatched('[', ']');\n          if (ret) {\n            return this.getToken(TokenType.CSS_BRACK_HACK, ret);\n          }\n        }\n    }\n    if (type === TokenType.CSS_PROPERTY || type === TokenType.CSS_COLON) {\n      return this.getValueToken();\n    }\n    if (this.status === STATUS.PROPERTY) {\n      return this.getPropertyToken();\n    }\n    return this.getSelectorToken();\n  }\n  /**\n   * get selector or name token\n   * @return {Object} []\n   */\n  getSelectorToken() {\n    let ret = '', code, str, token, chr, record, escape = false;\n    let tmpValue = '', tmpFlag = false;\n    while (this.pos < this.length) {\n      token = this.getTplToken();\n      if (token) {\n        ret += token.value;\n        continue;\n      }\n      chr = this.text[this.pos];\n      code = chr.charCodeAt(0);\n      if (code === 0x5c || escape) {\n        escape = !escape;\n        ret += this.next();\n        continue;\n      } else if (code === 0x7b) { // {\n        break;\n      } else if (code === 0x2f && this.text.charCodeAt(this.pos + 1) === 0x2a) {\n        record = record || this.record();\n        tmpValue += this.getCommentToken(1, false).value;\n        continue;\n      }\n      if (tmpValue && code !== 0x5b) {\n        tmpValue += chr;\n        tmpFlag = true;\n      }\n      if (record && !this.isWhiteSpace(code)) {\n        record = undefined;\n        ret += tmpValue;\n        tmpValue = '';\n      }\n      if (!escape && (code === 0x22 || code === 0x27)) {\n        ret += this.getQuote({\n          rollback: true\n        }).value;\n        continue;\n      } else if (code === 0x5b) { // [ ]\n        str = this.getMatchedChar(0x5b, 0x5d, {\n          quote: true\n        });\n        if (str) {\n          ret += str;\n          continue;\n        }\n      } else if (code === 0x28) { // ( )\n        str = this.getMatchedChar(0x28, 0x29, {\n          quote: true,\n          nest: true\n        });\n        if (str) {\n          ret += str;\n          continue;\n        }\n      }\n      if (tmpFlag) {\n        this.next();\n        tmpFlag = false;\n      } else {\n        ret += this.next();\n      }\n    }\n    token = this.getToken(TokenType.CSS_SELECTOR, ret);\n    token.value = this.skipRightSpace(ret);\n    if (record) {\n      // record.spaceBefore = record.newlineBefore = 0;\n      this.rollback(record);\n    }\n    if (this.options.parseSelector) {\n      token.ext = new SelectorTokenize(token.value, this.options).run();\n    }\n    return token;\n  }\n  /**\n   * get property token\n   * @return {Object} []\n   */\n  getPropertyToken() {\n    let ret = '', chr, code;\n    this.record();\n    while (this.pos < this.length) {\n      chr = this._text[this.pos];\n      code = chr.charCodeAt(0);\n      // ;\n      if (code === 0x3b) {\n        this.rollback();\n        return this.getValueToken();\n      }\n      // : / }\n      if (code === 0x3a || code === 0x2f || code === 0x7d || this.isWhiteSpace(code)) {\n        break;\n      }\n      ret += this.next();\n    }\n    return this.getToken(TokenType.CSS_PROPERTY, ret, this.parseProperty(ret));\n  }\n  /**\n   * parse property\n   * @return {Object} []\n   */\n  parseProperty(property) {\n    let prefix = '', suffix = '', code = property.charCodeAt(0);\n    if (code === 0x2d) {\n      property = property.replace(/^\\-\\w+\\-/, function(a) {\n        prefix = a;\n        return '';\n      });\n    } else if (isHackChar(code)) {\n      prefix = property[0];\n      property = property.slice(1);\n    }\n    return {\n      prefix: prefix.toLowerCase(),\n      suffix: suffix,\n      value: property.toLowerCase()\n    };\n  }\n  /**\n   * get value token\n   * @return {Object} []\n   */\n  getValueToken() {\n    let ret = '', code, chr, token;\n    let escape = false, record, quote, hasTpl = false;\n    let tplValue = '', tmpFlag = false;\n    while (this.pos < this.length) {\n      token = this.getTplToken();\n      if (token) {\n        ret += token.value;\n        hasTpl = true;\n        continue;\n      }\n      chr = this.text[this.pos];\n      code = chr.charCodeAt(0);\n      if (code === 0x5c || escape) {\n        escape = !escape;\n        ret += this.next();\n        continue;\n      } else if (code === 0x3b || code === 0x7d) { // ; or }\n        break;\n      } else if (code === 0x2f && this.text.charCodeAt(this.pos + 1) === 0x2a) {\n        record = record || this.record();\n        tplValue += this.getCommentToken(1, false).value;\n        continue;\n      }\n      if (tplValue) {\n        tplValue += chr;\n        tmpFlag = true;\n      }\n      if (record && !this.isWhiteSpace(code)) {\n        record = undefined;\n        ret += tplValue;\n        tplValue = '';\n      }\n      if (!escape && (code === 0x22 || code === 0x27)) {\n        quote = this.getQuote({\n          rollback: true\n        });\n        if (!quote.find) {\n          this.error(`can not find matched quote \\`${chr}\\``);\n        }\n        ret += quote.value;\n        continue;\n      } else if (code === 0x28) { // ( )\n        ret += this.getMatchedChar(0x28, 0x29, {\n          nest: true,\n          quote: true,\n          multi_comment: true\n        });\n        continue;\n      }\n      if (tmpFlag) {\n        this.next();\n        tmpFlag = false;\n      } else {\n        ret += this.next();\n      }\n    }\n    token = this.getToken(TokenType.CSS_VALUE, ret);\n    ret = this.skipRightSpace(ret);\n    token.value = ret;\n    if (record) {\n      // record.spaceBefore = record.newlineBefore = 0;\n      this.rollback(record);\n    }\n    token.ext = this.parseValue(ret);\n    token.ext.hasTpl = hasTpl;\n    return token;\n  }\n  /**\n   * parse css value\n   * @param  {String} value []\n   * @return {Object}       []\n   */\n  parseValue(value) {\n    // get css value suffix & important\n    let prefix = '', suffix = '', important = false;\n    if (value.indexOf('\\\\') > -1) {\n      value = value.replace(/(?:\\\\\\d)+$/, function(a) {\n        suffix = a;\n        return '';\n      });\n    }\n    if (value.indexOf('!') > -1) {\n      value = value.replace(/!\\s*important/i, function() {\n        important = true;\n        return '';\n      });\n    }\n    // get css value prefix\n    if (value.charCodeAt(0) === 0x2d) {\n      value = value.replace(/^\\-\\w+\\-/, function(a) {\n        prefix = a;\n        return '';\n      });\n    }\n    if (suffix || important) {\n      value = value.trim();\n    }\n    return {\n      prefix: prefix,\n      suffix: suffix,\n      important: important,\n      value: value\n    };\n  }\n  /**\n   * skip comment\n   * @return {void} []\n   */\n  skipComment() {\n    // start with /*, but not /*!\n    let comment;\n    while (this.text.charCodeAt(this.pos) === 0x2f &&\n      this.text.charCodeAt(this.pos + 1) === 0x2a &&\n      this.text.charCodeAt(this.pos + 2) !== 0x21) {\n      comment = this.getCommentToken(1, true);\n      this.commentBefore.push(comment);\n    }\n  }\n  /**\n   * get @ token\n   * @return {Object} []\n   */\n  getAtToken() {\n    let i = 0, item, code, ret = '', length, chr, type = TokenType.CSS_AT;\n    for (; item = atType[i++];) {\n      if (!this.lookAt(item[0])) {\n        continue;\n      }\n      length = item[0].length;\n      code = this._text.charCodeAt(this.pos + length);\n      // whitespace or ; or { or / or ' or \" or : or ,\n      if (code === 0x20 || code === 0x3b || code === 0x7b ||\n          code === 0x2f || code === 0x22 || code === 0x27 ||\n          code === 0x3a || code === 0x2c) {\n        ret = this.forward(length);\n        type = item[1];\n        break;\n      }\n    }\n    while (this.pos < this.length) {\n      chr = this.text[this.pos];\n      code = chr.charCodeAt(0);\n      if (code === 0x2f && this.text.charCodeAt(this.pos + 1) === 0x2a) {\n        ret += this.getCommentToken(1, false).value;\n        continue;\n      } else if (code === 0x22 || code === 0x27) {\n        ret += this.getQuote().value;\n        continue;\n      }\n      // ;\n      if (code === 0x3b) {\n        ret += this.next();\n        break;\n      }\n      // {\n      if (code === 0x7b) {\n        break;\n      }\n      ret += this.next();\n    }\n    const token = this.getToken(type, ret);\n    token.value = this.skipRightSpace(ret);\n    return token;\n  }\n  /**\n   * run\n   * @return {Array} [text tokens]\n   */\n  run() {\n    let ret = [], token, type;\n    for (; token = this.getNextToken();) {\n      if(token.type === TokenType.CSS_LEFT_BRACE && ret.length && ret[ret.length - 1].type === TokenType.TPL) {\n        const prev = ret[ret.length - 1];\n        prev.type = TokenType.CSS_SELECTOR;\n        prev.ext = {};\n        this.prevToken = prev;\n        this.status = STATUS.PROPERTY;\n      }\n      //  merge when prev token is tpl\n      else if (token.type === TokenType.CSS_SELECTOR && ret.length && ret[ret.length - 1].type === TokenType.TPL) {\n        const prev = ret[ret.length - 1];\n        let space = '';\n        if (prev.end !== token.start) {\n          space = ' ';\n        }\n        token.value = prev.value + space + token.value;\n        token.start = prev.start;\n        token.loc.start = prev.loc.start;\n        if (token.ext.group) {\n          token.ext.group[0].tokens[0].value = prev.value + space + token.ext.group[0].tokens[0].value;\n        }\n        ret.length = ret.length - 1;\n      }\n      ret.push(token);\n      type = token.type;\n      if (type === TokenType.TPL || type === TokenType.CSS_LEFT_BRACE ||\n          type === TokenType.CSS_RIGHT_BRACE || type === TokenType.CSS_COLON ||\n          type === TokenType.CSS_SEMICOLON || type === TokenType.CSS_BRACK_HACK ||\n          type === TokenType.RESERVED_COMMENT\n      ) {\n        continue;\n      }\n      this.prevToken = token;\n      if (type === TokenType.CSS_FONT_FACE ||\n          type === TokenType.CSS_PAGE ||\n          type === TokenType.CSS_VIEWPORT ||\n          type === TokenType.CSS_AT) {\n        this.status = STATUS.PROPERTY;\n      }\n    }\n    return ret;\n  }\n}\n"]}