{"version":3,"sources":["../../../src/lang/css/compress.js"],"names":[],"mappings":"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","file":"compress.js","sourcesContent":["import Base from \"../../util/base.js\";\nimport Tokenize from \"./tokenize.js\";\n\nimport TokenType from \"../../util/token_type.js\";\nimport SelectorTokenize from \"./selector_tokenize.js\";\n\nimport {\n  getShortValue,\n  isMultiSameProperty,\n  mergeProperties,\n  selectorToken2Text,\n  isAtType,\n  isUnMergeProperty,\n  token2Text,\n  mergePropertyChildren,\n  selectorGroupToken2Text,\n} from \"./util.js\";\n\nimport { createToken } from \"../../util/util_ext.js\";\n\n/**\n * default compress options\n */\nconst compressOpts = {\n  removeComment: true,\n  removeLastSemicolon: true,\n  removeEmptySelector: true,\n  overrideSameProperty: true,\n  shortValue: true,\n  mergeProperty: true,\n  sortProperty: true,\n  sortSelector: true,\n  sortSelectorChunk: 50,\n  mergeSelector: true,\n  propertyToLower: true,\n};\n/**\n * compress css\n */\nexport default class CssCompress extends Base {\n  /**\n   * constructor\n   */\n  constructor(text, options = {}) {\n    super(\"\", options);\n    this._optText = text;\n\n    this.tokens = [];\n    this.index = 0;\n    this.length = 0;\n\n    this.result = [];\n    this.selectors = {};\n    this.inKeyframes = false;\n\n    this.options = {\n      ...compressOpts,\n      ...this.options,\n    };\n  }\n  /**\n   * init tokens\n   */\n  initTokens() {\n    if (typeof this._optText === \"string\") {\n      const instance = new Tokenize(this._optText, this.options);\n      this.tokens = instance.run();\n    } else {\n      this.tokens = this._optText;\n    }\n    this.length = this.tokens.length;\n  }\n  /**\n   * compress css value\n   */\n  compressValue(value, property) {\n    // remove comment\n    value = value.replace(/\\/\\*.*?\\*\\//g, \"\");\n    // remove newline\n    value = value.replace(/\\n+/g, \"\");\n    // remove extra whitespace\n    value = value.replace(/\\s+/g, \" \");\n\n    // get short value\n    if (this.options.shortValue) {\n      value = getShortValue(value, property);\n    }\n\n    // if property is filter, can't replace `, ` to `,`\n    // see http://www.imququ.com/post/the_bug_of_ie-matrix-filter.html\n    if (property.toLowerCase() !== \"filter\") {\n      // remove whitespace after ,\n      value = value.replace(/,\\s+/g, \",\");\n      value = value.replace(\n        /#([0-9a-fA-F])\\1([0-9a-fA-F])\\2([0-9a-fA-F])\\3/g,\n        \"#$1$2$3\"\n      );\n    }\n\n    // replace 0(px,em,%) with 0.\n    value = value.replace(\n      /(^|\\s)(0)(?:px|em|%|in|cm|mm|pc|pt|ex|rem)/gi,\n      \"$1$2\"\n    );\n    // replace 0.6 to .6\n    value = value.replace(/(^|\\s)0\\.(\\d+)/g, \"$1.$2\");\n    // replace 1.0 to 1\n    value = value.replace(/(\\d+)\\.0(\\s|$)/g, \"$1$2\");\n    // replace .0 to 0\n    value = value.replace(/(^|\\s)\\.(0)(\\s|$)/g, \"$1$2$3\");\n    // Shorten colors from #AABBCC to #ABC. Note that we want to make sure\n    // the color is not preceded by either \", \" or =. Indeed, the property\n    //     filter: chroma(color=\"#FFFFFF\");\n    // would become\n    //     filter: chroma(color=\"#FFF\");\n    // which makes the filter break in IE.\n    // value = value.replace(/([^\\\"'=\\s])(\\s*)#([0-9a-fA-F])\\3([0-9a-fA-F])\\4([0-9a-fA-F])\\5/ig, '$1$2#$3$4$5');\n    return value;\n  }\n  /**\n   * get selector properties\n   */\n  getSelectorProperties() {\n    const braces = this.tokens[this.index++];\n    if (!braces) {\n      return {};\n    }\n    if (braces.type !== TokenType.CSS_LEFT_BRACE) {\n      throw new Error(\"after selector must be a {\");\n    }\n\n    let attrs = {},\n      pos = 0,\n      key = \"\";\n    let propertyToken = null,\n      valueToken = null,\n      tplToken = null;\n    let hasTpl = false,\n      hasHack = false;\n\n    selectorCondition: while (this.index < this.length) {\n      let token = this.tokens[this.index++];\n      token = this.removeComment(token);\n      switch (token.type) {\n        case TokenType.CSS_PROPERTY:\n          key += this.options.propertyToLower\n            ? token.value.toLowerCase()\n            : token.value;\n          if (!this.options.overrideSameProperty && key in attrs) {\n            key += pos++;\n          }\n          if (this.options.propertyToLower) {\n            token.ext.value = token.ext.value.toLowerCase();\n            token.value = token.value.toLowerCase();\n          }\n          propertyToken = token;\n\n          // has tplToken before property\n          if (tplToken) {\n            attrs[`${tplToken.value}%${pos++}`] = {\n              value: tplToken,\n            };\n            tplToken = null;\n          }\n          break;\n        case TokenType.CSS_VALUE:\n          valueToken = token;\n          if (tplToken) {\n            valueToken.value = tplToken.value + valueToken.value;\n            valueToken.ext.value = tplToken.value + valueToken.ext.value;\n            tplToken = null;\n          }\n          break;\n        case TokenType.CSS_SEMICOLON:\n        case TokenType.CSS_RIGHT_BRACE:\n          if (valueToken === null && tplToken && propertyToken) {\n            valueToken = tplToken;\n            tplToken = null;\n          }\n\n          // already has tplToken\n          if (tplToken) {\n            attrs[`${tplToken.value}%${pos++}`] = {\n              value: tplToken,\n            };\n            tplToken = null;\n          }\n\n          if (!propertyToken || !valueToken) {\n            if (token.type === TokenType.CSS_RIGHT_BRACE) {\n              break selectorCondition;\n            }\n            break;\n          }\n\n          // propertyToken is tpl\n          if (propertyToken.type === TokenType.TPL) {\n            attrs[`${propertyToken.value}%${pos++}`] = {\n              property: propertyToken,\n              value: valueToken,\n            };\n            propertyToken = valueToken = null;\n            if (token.type === TokenType.CSS_RIGHT_BRACE) {\n              break selectorCondition;\n            }\n            break;\n          }\n\n          // optimize css value\n          if (valueToken.type === TokenType.CSS_VALUE) {\n            valueToken.ext.value = this.compressValue(\n              valueToken.ext.value,\n              propertyToken.ext.value\n            );\n            /**\n             * for div{color:red;color:blue\\9;}\n             * if suffix in css value, can not override property.\n             */\n            key += valueToken.ext.suffix;\n          }\n\n          // multi same property\n          // background:red;background:url(xx.png)\n          if (isMultiSameProperty(key, valueToken.value)) {\n            key += \"%\" + pos++;\n          }\n\n          // already has tpl syntax, can not override property\n          // div{<&if $name&>color:red;<&else&>color:blue;<&/if&>font-size:12px;}\n          if (hasTpl) {\n            key += \"%\" + pos++;\n          }\n\n          if (this.options.overrideSameProperty) {\n            attrs = mergeProperties(attrs, {\n              [key]: {\n                property: propertyToken,\n                value: valueToken,\n              },\n            });\n          } else {\n            attrs[key] = {\n              property: propertyToken,\n              value: valueToken,\n            };\n          }\n          propertyToken = valueToken = null;\n          // hasColon = false;\n          key = \"\";\n\n          if (token.type === TokenType.CSS_RIGHT_BRACE) {\n            break selectorCondition;\n          }\n          break;\n        case TokenType.CSS_BRACK_HACK:\n          // for css hack [;color:red;]\n          attrs[`${token.value}%${pos++}`] = {\n            value: token,\n          };\n          hasHack = true;\n          break;\n        case TokenType.TPL:\n          // already has tplToken\n          if (tplToken) {\n            attrs[`${token.value}%${pos++}`] = {\n              value: tplToken,\n            };\n          }\n          tplToken = token;\n          hasTpl = true;\n          break;\n        case TokenType.CSS_COLON:\n          // is tplToken before :\n          if (!propertyToken && tplToken) {\n            propertyToken = tplToken;\n            tplToken = null;\n          }\n          // hasColon = true;\n          break;\n      }\n    }\n    if (!hasHack && !hasTpl) {\n      if (this.options.sortProperty) {\n        attrs = this.sortProperties(attrs);\n      }\n      if (this.options.mergeProperty) {\n        attrs = this.mergePropertyChildren(attrs);\n      }\n    }\n    return attrs;\n  }\n  /**\n   * sort properties\n   */\n  sortProperties(attrs) {\n    return attrs;\n  }\n  /**\n   * merge properties\n   */\n  mergePropertyChildren(attrs) {\n    attrs = mergePropertyChildren(attrs, \"padding\");\n    attrs = mergePropertyChildren(attrs, \"margin\");\n    return attrs;\n  }\n  /**\n   * collect selector\n   */\n  collectSelector(token, selectorPos = 0) {\n    const attrs = this.getSelectorProperties();\n    // remove empty selector\n    if (this.options.removeEmptySelector && Object.keys(attrs).length === 0) {\n      return true;\n    }\n    if (!token.ext.group) {\n      const instance = new SelectorTokenize(token.value, this.options);\n      token.ext = instance.run();\n    }\n    const detail = {\n      attrs,\n      selector: token,\n      pos: selectorPos++,\n    };\n    const selectorKey = selectorToken2Text(token);\n    token.value = selectorKey;\n    if (selectorKey in this.selectors) {\n      this.selectors[selectorKey].attrs = mergeProperties(\n        this.selectors[selectorKey].attrs,\n        attrs\n      );\n    } else {\n      this.selectors[selectorKey] = detail;\n    }\n  }\n  /**\n   * selector can combine\n   */\n  selectorCanCombine(selectors) {\n    const list = [\"-ms-\", \":root\", \"-placeholder\"];\n    return selectors.every((selector) => {\n      return list.every((item) => {\n        return selector.selector.value.indexOf(item) === -1;\n      });\n    });\n  }\n  /**\n   * get properties intersect in 2 selectors\n   */\n  getPropertiesIntersect(se1, se2) {\n    const attrs1 = se1.attrs;\n    const attrs2 = se2.attrs;\n    const assoc = {};\n    let assoclen = 0;\n    for (const key in attrs1) {\n      // only have value token\n      if (!attrs1[key].property) {\n        continue;\n      }\n      // not exist in attrs2\n      if (!(key in attrs2)) {\n        continue;\n      }\n      if (!attrs2[key].property) {\n        continue;\n      }\n      const attrs1Value = attrs1[key].value.value;\n      const attrs2Value = attrs2[key].value.value;\n      // value not equal\n      if (attrs1Value !== attrs2Value) {\n        continue;\n      }\n      // property has prefix or value has suffix\n      // if(attrs1[key].property.ext.prefix || attrs1[key].value.ext.suffix){\n      //   continue;\n      // }\n      if (this.isUnMergeProperty(attrs1[key], attrs1, attrs2)) {\n        continue;\n      }\n      assoc[key] = attrs1[key];\n      // 2 chars is : and ;\n      assoclen +=\n        attrs1[key].property.value.length + attrs1[key].value.value.length + 2;\n    }\n    const length = Object.keys(assoc).length;\n    if (length === 0) {\n      return false;\n    }\n    if (\n      length !== Object.keys(attrs1).length &&\n      length !== Object.keys(attrs2).length\n    ) {\n      // 3 chars is `, { }`\n      const selen = se1.selector.value.length + se2.selector.value.length + 3;\n      if (selen >= assoclen) {\n        return false;\n      }\n    }\n    return assoc;\n  }\n  /**\n   * check css value token equal\n   */\n  checkValueTokenEqual(item1, item2) {\n    const ext1 = item1.ext;\n    const ext2 = item2.ext;\n    const list = [\"prefix\", \"suffix\", \"value\", \"important\"];\n    return list.every((item) => {\n      return ext1[item] === ext2[item];\n    });\n  }\n  /**\n   * is unmerge property\n   */\n  isUnMergeProperty(item1, attrs1, attrs2) {\n    const item1Property = item1.property.ext.value.toLowerCase();\n    const item1PropertyPrefix = item1.property.ext.prefix;\n    const item1Value = item1.value.ext.value;\n    if (isUnMergeProperty(item1Property, item1Value)) {\n      return true;\n    }\n    // if(isUnSortProperty(item1Property)){\n    //   return true;\n    // }\n    for (const key in attrs1) {\n      const itemPropertyValue = attrs1[key].property.ext.value.toLowerCase();\n      const itemPropertyPrefix = attrs1[key].property.ext.prefix;\n      if (item1Property === itemPropertyValue) {\n        if (item1PropertyPrefix !== itemPropertyPrefix) {\n          return true;\n        }\n        if (!this.checkValueTokenEqual(item1.value, attrs1[key].value)) {\n          return true;\n        }\n      }\n      if (item1Property.indexOf(\"-\") > -1) {\n        if (item1Property.indexOf(itemPropertyValue + \"-\") > -1) {\n          return true;\n        }\n      } else {\n        if (itemPropertyValue.indexOf(item1Property + \"-\") > -1) {\n          return true;\n        }\n      }\n    }\n    for (const key in attrs2) {\n      const itemPropertyValue = attrs2[key].property.ext.value.toLowerCase();\n      const itemPropertyPrefix = attrs2[key].property.ext.prefix;\n      if (item1Property === itemPropertyValue) {\n        if (item1PropertyPrefix !== itemPropertyPrefix) {\n          return true;\n        }\n        if (!this.checkValueTokenEqual(item1.value, attrs2[key].value)) {\n          return true;\n        }\n      }\n      if (item1Property.indexOf(\"-\") > -1) {\n        if (item1Property.indexOf(itemPropertyValue + \"-\") > -1) {\n          return true;\n        }\n      } else {\n        if (itemPropertyValue.indexOf(item1Property + \"-\") > -1) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  /**\n   * get assoc selector token\n   */\n  getAssocSelectorToken(se1, se2) {\n    const value = se1.value + \",\" + se2.value;\n    const token = createToken(TokenType.CSS_SELECTOR, value, se1);\n    let equal = false;\n    if (se1.ext.specificityEqual && se2.ext.specificityEqual) {\n      equal = se1.ext.minSpecificity === se2.ext.minSpecificity;\n    }\n    const group = se1.ext.group.concat(se2.ext.group);\n    token.ext = {\n      minSpecificity: Math.min(se1.ext.minSpecificity, se2.ext.minSpecificity),\n      maxSpecificity: Math.max(se1.ext.maxSpecificity, se2.ext.maxSpecificity),\n      specificityEqual: equal,\n      group,\n    };\n    return token;\n  }\n  /**\n   * get selector intersect\n   */\n  getSelectorsIntersect(selectors) {\n    while (1) {\n      const length = selectors.length;\n      if (length < 2) {\n        break;\n      }\n      const result = [];\n      let flag = false;\n      for (let index = 0; index < length - 1; index++) {\n        let assoc = null;\n        if (this.selectorCanCombine([selectors[index], selectors[index + 1]])) {\n          assoc = this.getPropertiesIntersect(\n            selectors[index],\n            selectors[index + 1]\n          );\n        }\n        if (assoc) {\n          for (const key in assoc) {\n            delete selectors[index].attrs[key];\n            delete selectors[index + 1].attrs[key];\n          }\n          flag = true;\n          const assocSelectorToken = this.getAssocSelectorToken(\n            selectors[index].selector,\n            selectors[index + 1].selector\n          );\n          result.push({\n            attrs: assoc,\n            selector: assocSelectorToken,\n          });\n        }\n        if (Object.keys(selectors[index].attrs).length) {\n          result.push(selectors[index]);\n        }\n      }\n      if (Object.keys(selectors[length - 1].attrs).length) {\n        result.push(selectors[length - 1]);\n      }\n      selectors = result;\n      if (!flag) {\n        break;\n      }\n    }\n    return selectors;\n  }\n  /**\n   * sort selectors\n   */\n  sortSelectors(selectors) {\n    const cache = {};\n    const length = selectors.length;\n\n    const compare = (se1, se2) => {\n      const se1Ext = se1.selector.ext;\n      const se2Ext = se2.selector.ext;\n      if (!se1Ext.specificityEqual || !se2Ext.specificityEqual) {\n        if (se1Ext.minSpecificity > se2Ext.maxSpecificity) {\n          return 1;\n        } else if (se1Ext.maxSpecificity < se2Ext.minSpecificity) {\n          return -1;\n        }\n        return se1.pos - se2.pos;\n      }\n      if (se1Ext.minSpecificity === se2Ext.minSpecificity) {\n        return se1.pos - se2.pos;\n      }\n      return se1Ext.minSpecificity - se2Ext.minSpecificity;\n    };\n    const compareNeighbor = (i, j) => {\n      for (let k = i + 1; k < j; k++) {\n        const key = `${k}_${j}`;\n        if (!cache[key]) {\n          cache[key] = compare(selectors[k], selectors[j]);\n        }\n        if (cache[key] < 0) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    for (let i = 0; i < length; i++) {\n      for (let j = i + 1; j < length; j++) {\n        const key = `${i}_${j}`;\n        if (!cache[key]) {\n          cache[key] = compare(selectors[i], selectors[j]);\n        }\n        if (cache[key] > 0 && compareNeighbor(i, j)) {\n          const tmp = selectors[j];\n          selectors[j] = selectors[i];\n          selectors[i] = tmp;\n        }\n      }\n    }\n    return selectors;\n  }\n  /**\n   * remove exist selector\n   */\n  compressSelectorToken(selector) {\n    const group = selector.ext.group;\n    if (group.length === 1) {\n      return selector;\n    }\n    let keys = {},\n      ret = [];\n    group.forEach((item) => {\n      const key = selectorGroupToken2Text(item);\n      if (!(key in keys)) {\n        ret.push(item);\n        keys[key] = true;\n      }\n    });\n    selector.ext.group = ret;\n    return selector;\n  }\n  /**\n   * selector to tokens\n   */\n  selectorToTokens(selectors) {\n    const ret = [];\n\n    const leftBrace = createToken(TokenType.CSS_LEFT_BRACE, \"{\");\n    const colon = createToken(TokenType.CSS_COLON, \":\");\n    const rightBrace = createToken(TokenType.CSS_RIGHT_BRACE, \"}\");\n    const semicolon = createToken(TokenType.CSS_SEMICOLON, \";\");\n\n    selectors.forEach((item) => {\n      item.selector = this.compressSelectorToken(item.selector);\n      ret.push(item.selector, leftBrace);\n      const attrs = Object.keys(item.attrs).map((key) => item.attrs[key]);\n      const length = attrs.length;\n      attrs.forEach((attr, index) => {\n        if (attr.property) {\n          ret.push(attr.property, colon);\n        }\n        ret.push(attr.value);\n        // if (attr.value.type !== TokenType.TPL) {\n        if (!this.options.removeLastSemicolon || index < length - 1) {\n          ret.push(semicolon);\n        }\n        // }\n      });\n      ret.push(rightBrace);\n    });\n    return ret;\n  }\n  /**\n   * compress selector\n   */\n  compressSelector() {\n    const keys = Object.keys(this.selectors);\n    if (keys.length === 0) {\n      return;\n    }\n    let selectors = keys.map((key) => this.selectors[key]);\n    this.selectors = {};\n\n    if (this.options.sortSelector) {\n      let i = 0;\n      let sortedSelectors = [];\n      const chunk = this.options.sortSelectorChunk;\n      while (true) {\n        const chunkSelectors = selectors.slice(i * chunk, (i + 1) * chunk);\n        if (chunkSelectors.length === 0) break;\n        sortedSelectors = sortedSelectors.concat(\n          this.sortSelectors(chunkSelectors)\n        );\n        if (chunkSelectors.length < chunk) break;\n        i++;\n      }\n      selectors = sortedSelectors;\n    }\n\n    let se = [],\n      result = [];\n    selectors.forEach((item) => {\n      if (item.selector.ext.specificityEqual) {\n        se.push(item);\n      } else {\n        se = this.getSelectorsIntersect(se);\n        result = result.concat(se);\n        result.push(item);\n        se = [];\n      }\n    });\n    if (se.length) {\n      se = this.getSelectorsIntersect(se);\n      result = result.concat(se);\n    }\n    const tokens = this.selectorToTokens(result);\n    this.result.push(...tokens);\n  }\n  /**\n   * remove comment\n   */\n  removeComment(token) {\n    if (!this.options.removeComment) {\n      return token;\n    }\n    const comments = [];\n    token.commentBefore.forEach((item) => {\n      if (item.value.indexOf(\"/*!\") === 0) {\n        comments.push(item);\n      }\n    });\n    token.commentBefore = comments;\n    return token;\n  }\n  /**\n   * run\n   */\n  run(retTokens = false) {\n    this.initTokens();\n    let hasCharset = false;\n    const sortSelector = this.options.sortSelector;\n    const sortProperty = this.options.sortProperty;\n    let selectorPos = 0;\n    let property = \"\";\n    while (this.index < this.length) {\n      let token = this.tokens[this.index++];\n      token = this.removeComment(token);\n      switch (token.type) {\n        case TokenType.CSS_SELECTOR:\n          this.collectSelector(token, selectorPos++);\n          break;\n        case TokenType.CSS_VALUE:\n          token.ext.value = this.compressValue(token.ext.value, property);\n          this.result.push(token);\n          break;\n        case TokenType.CSS_RIGHT_BRACE:\n          if (\n            this.index > 1 &&\n            this.tokens[this.index - 2].type === TokenType.CSS_RIGHT_BRACE\n          ) {\n            this.compressSelector();\n            this.options.sortProperty = sortProperty;\n            this.options.sortSelector = sortSelector;\n            this.inKeyframes = false;\n            this.result.push(token);\n            break;\n          }\n        case TokenType.CSS_KEYFRAMES:\n          this.options.sortSelector = false;\n          this.options.sortProperty = false;\n          this.inKeyframes = true;\n        default:\n          if (isAtType(token.type) || token.type === TokenType.CSS_SUPPORTS) {\n            this.compressSelector();\n          }\n          if (token.type === TokenType.CSS_PROPERTY) {\n            property = token.ext.value.toLowerCase();\n          }\n          if (token.type === TokenType.CSS_CHARSET) {\n            if (!hasCharset) {\n              this.result.push(token);\n            }\n            hasCharset = true;\n          } else if (token.type === TokenType.TPL) {\n            // console.log(token)\n            this.compressSelector();\n            this.result.push(token);\n          } else {\n            this.result.push(token);\n          }\n      }\n    }\n    this.compressSelector();\n    return retTokens ? this.result : token2Text(this.result);\n  }\n}\n"]}