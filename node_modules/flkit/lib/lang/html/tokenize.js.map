{"version":3,"sources":["../../../src/lang/html/tokenize.js"],"names":[],"mappings":"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","file":"tokenize.js","sourcesContent":["import Base from '../../util/tokenize.js';\nimport TokenType from '../../util/token_type.js';\nimport Message from '../../util/message.js';\nimport {\n  specialTokens,\n  reservedCommentPrefix,\n  rawTokens\n} from './config.js';\nimport {\n  isTagFirstChar,\n  isTagNameChar,\n  parseScriptAttrs,\n  parseStyleAttrs\n} from './util.js';\n\nconst specialTokensLength = specialTokens.length;\nconst reservedCommentLength = reservedCommentPrefix.length;\nconst rawTokensLength = rawTokens.length;\nconst isArray = Array.isArray;\n\n/**\n * html tokenize\n */\nexport default class HtmlTokenize extends Base {\n  /**\n   * get next token\n   * @return {Object} [token]\n   */\n  getNextToken() {\n    let token = super.getNextToken();\n    if (token || token === false) {\n      return token;\n    }\n    const code = this._text.charCodeAt(this.pos);\n    // <\n    if (code === 0x3c) {\n      const nextCode = this._text.charCodeAt(this.pos + 1);\n      // all special token start with <!\n      token = nextCode === 0x21 ? this.getSpecialToken() : this.getRawToken();\n      if (token) {\n        return token;\n      }\n      if (isTagFirstChar(nextCode)) {\n        return this.getTagToken();\n      }\n    }\n    return this.getTextToken();\n  }\n  /**\n   * get text token\n   * @return {Object} []\n   */\n  getTextToken() {\n    let ret = '';\n    while (this.pos < this.length) {\n      if (this.isTplNext()) {\n        break;\n      }\n      const nextCode = this._text.charCodeAt(this.pos);\n      const next2Code = this._text.charCodeAt(this.pos + 1);\n      // if next char is < and next2 char is tag first char\n      if (nextCode === 0x3c && (next2Code === 0x21 || isTagFirstChar(next2Code))) {\n        break;\n      }\n      ret += this.next();\n    }\n    const token = this.getToken(TokenType.HTML_TEXT, ret);\n    token.value = ret;\n    return token;\n  }\n  /**\n   * get tag token\n   * @return {Object} []\n   */\n  getTagToken() {\n    this.record();\n    let ret = this.next();\n    let type, tagEnd = false, quote;\n    while (this.pos < this.length) {\n      const chr = this.text[this.pos];\n      const code = this._text.charCodeAt(this.pos);\n      if (!type) {\n        switch (code) {\n          case 0x2f: // /\n            const nextCode = this._text.charCodeAt(this.pos + 1);\n            // if next char is not  >= 'a' && <= 'z', throw error\n            if (nextCode >= 0x61 && nextCode <= 0x7a) {\n              type = TokenType.HTML_TAG_END;\n            } else {\n              this.error('end tag is not valid');\n            }\n            break;\n          case 0x3f: // ?\n            ret += this.next();\n            if (this.lookAt('xml ') || this.lookAt('xml>')) {\n              type = TokenType.XML_START;\n            } else {\n              type = TokenType.HTML_TAG_START;\n            }\n            break;\n          default:\n            // a-z\n            if (code >= 0x61 && code <= 0x7a) {\n              const tagName = this.getTagName();\n              const tagAttrs = this.getTagAttrs();\n              const str = '<' + tagName + tagAttrs.value;\n              const token = this.getToken(TokenType.HTML_TAG_START, str, {\n                tag: tagName,\n                tagLowerCase: tagName.toLowerCase(),\n                attrs: tagAttrs.attrs,\n                slash: tagAttrs.slash\n              });\n              return token;\n            } else {\n              type = TokenType.HTML_TEXT;\n            }\n            break;\n        }\n      }\n      if (code === 0x22 || code === 0x27) { // char is ' or \"\n        quote = this.getQuote({\n          checkNext: true,\n          rollback: true\n        });\n        ret += quote.value;\n        if (!quote.find) {\n          this.error(`can not find matched quote char \\`${chr}\\``);\n        }\n        continue;\n      }\n      const tpl = this.getTplToken();\n      if (tpl) {\n        ret += tpl.value;\n        continue;\n      }\n      // 0x3e is >\n      if (code === 0x3e) {\n        ret += this.next();\n        tagEnd = true;\n        break;\n      }\n      ret += this.next();\n    }\n    // tag not closed\n    if (!tagEnd) {\n      return this.getToken(TokenType.HTML_RAW_TEXT, ret);\n    }\n    // get tag attrs\n    if (type === TokenType.HTML_TAG_END) {\n      // 8.1.2.2 in http://www.w3.org/TR/html5/syntax.html\n      // in end tag, may be have whitespace on right\n      const tag = ret.slice(2, -1).trim();\n      const token = this.getToken(type, ret, {\n        tag: tag,\n        tagLowerCase: tag.toLowerCase()\n      });\n      return token;\n    }\n    return this.getToken(type, ret);\n  }\n  /**\n   * get tag name\n   * @return {[type]} [description]\n   */\n  getTagName() {\n    let chr, ret = '';\n    while (this.pos < this.length) {\n      chr = this._text[this.pos];\n      if (!isTagNameChar(chr.charCodeAt(0))) {\n        break;\n      }\n      ret += this.next();\n    }\n    return ret;\n  }\n  /**\n   * get tag attrs\n   * http://www.w3.org/TR/html5/syntax.html\n   * @param  {String} tag [tag string]\n   * @return {Object}     [tag name & attrs]\n   */\n  getTagAttrs() {\n    let attrs = [], chr, code, value = '';\n    let hasEqual = false, spaceBefore = false, tagEnd = false;\n    const tplInstance = this.getTplInstance();\n    let attrName = '', attrValue = '', tplToken;\n    let voidElement = false;\n    const commentBefore = this.commentBefore;\n    // avoid comments to tplToken\n    this.commentBefore = [];\n    while (this.pos < this.length) {\n      tplToken = this.getTplToken();\n      if (tplToken) {\n        value += tplToken.value;\n        if (tplInstance.hasOutput(tplToken)) {\n          if (hasEqual) {\n            attrValue += tplToken.value;\n          } else {\n            attrName += tplToken.value;\n          }\n        } else {\n          if (hasEqual) {\n            if (attrValue) {\n              attrs.push({name: attrName, value: attrValue}, tplToken);\n              attrName = attrValue = '';\n            } else {\n              attrValue += tplToken.value;\n            }\n          } else {\n            if (attrName) {\n              attrs.push({name: attrName});\n            }\n            tplToken.spaceBefore = spaceBefore;\n            attrs.push(tplToken);\n            attrName = attrValue = '';\n          }\n        }\n        spaceBefore = false;\n        continue;\n      }\n      chr = this.text[this.pos];\n      code = chr.charCodeAt(0);\n      value += chr;\n      // char is >\n      if (code === 0x3e) {\n        tagEnd = true;\n        this.next();\n        break;\n      }\n      voidElement = false;\n      if (code === 0x3d) { // char is =\n        hasEqual = true;\n        spaceBefore = false;\n      } else if (!hasEqual && code === 0x2f) { // 0x2f is /\n        voidElement = true;\n        if (this.text.charCodeAt[this.pos - 1] !== 0x2f) {\n          if (attrName) {\n            attrs.push({name: attrName});\n          }\n          attrName = attrValue = '';\n          hasEqual = false;\n        }\n      } else if (hasEqual && (code === 0x22 || code === 0x27)) { // char is ' or \"\n        const quote = this.getQuote({\n          checkNext: true,\n          rollback: true\n        });\n        value += quote.value.slice(1);\n        // quote string not found\n        if (!quote.find) {\n          this.error(`can not find matched quote char \\`${chr}\\``);\n        }\n        attrValue += quote.value;\n        attrs.push({name: attrName, value: attrValue});\n        attrName = attrValue = '';\n        hasEqual = spaceBefore = false;\n        continue;\n      } else if (this.isWhiteSpace(code)) { // whitespace\n        if (hasEqual && attrValue) {\n          attrs.push({name: attrName, value: attrValue});\n          attrName = attrValue = '';\n          hasEqual = spaceBefore = false;\n        } else {\n          spaceBefore = true;\n        }\n      } else {\n        if (hasEqual) {\n          attrValue += chr;\n        } else {\n          if (spaceBefore && attrName) {\n            attrs.push({name: attrName});\n            attrName = chr;\n          } else {\n            attrName += chr;\n          }\n        }\n        spaceBefore = false;\n      }\n      this.next();\n    }\n    // add extra attr name or attr value\n    if (attrName || attrValue) {\n      if (hasEqual) {\n        attrs.push({name: attrName, value: attrValue});\n      } else {\n        attrs.push({name: attrName});\n      }\n    }\n    if (!tagEnd) {\n      return {\n        value: value,\n        message: Message.TagUnClosed\n      };\n    }\n    for (let i = 0, length = attrs.length, item; i < length; i++) {\n      item = attrs[i];\n      if (item.ld) {\n        attrs[i].tpl = true;\n        continue;\n      } else if (item.value !== undefined) {\n        code = item.value.charCodeAt(0);\n        if (code === 0x22 || code === 0x27) {\n          attrs[i].quote = item.value.slice(0, 1);\n          attrs[i].value = item.value.slice(1, -1);\n        } else {\n          attrs[i].quote = '';\n          attrs[i].value = item.value;\n        }\n        const hasTpl = this.hasTpl(attrs[i].value);\n        // add has tpl flag for value\n        if (hasTpl && !attrs[i].type) {\n          attrs[i].hasTpl = true;\n        }\n      }\n      // template syntax in attribute name\n      // may be has uppercase chars in template syntax\n      // etc: <input <?php echo $NAME;?>name=\"value\" >\n      if (this.hasTpl(item.name)) {\n        attrs[i].nameLowerCase = item.name;\n      } else {\n        attrs[i].nameLowerCase = item.name.toLowerCase();\n      }\n    }\n    this.commentBefore = commentBefore;\n    return {\n      value: value,\n      slash: voidElement,\n      attrs: attrs\n    };\n  }\n  /**\n   * skip comment\n   * @return {void} []\n   */\n  skipComment() {\n    // start with <!\n    commentLabel: while (this.text.charCodeAt(this.pos) === 0x3c &&\n      this.text.charCodeAt(this.pos + 1) === 0x21) {\n      for (let i = 0; i < reservedCommentLength; i++) {\n        if (this.lookAt(reservedCommentPrefix[i])) {\n          break commentLabel;\n        }\n      }\n      // template delimiter may be <!-- & -->\n      if (this.isTplNext()) {\n        break;\n      }\n      const comment = this.getCommentToken(2);\n      if (comment) {\n        this.commentBefore.push(comment);\n      } else {\n        break;\n      }\n    }\n  }\n  /**\n   * get raw element token\n   * @return {Object} []\n   */\n  getRawToken() {\n    let i = 0, item, pos = 0, code;\n    let startToken, contentToken, endToken, token;\n    while (i < rawTokensLength) {\n      item = rawTokens[i++];\n      if (!this.lookAt(item[0])) {\n        continue;\n      }\n      code = this._text.charCodeAt(this.pos + item[0].length);\n      // next char is not space or >\n      if (!this.isWhiteSpace(code) && code !== 0x3e) {\n        continue;\n      }\n      pos = this.find(item[1]);\n      if (pos === -1) {\n        return;\n      }\n      code = this._text.charCodeAt(pos + item[1].length);\n      // next char is not space or >\n      if (!this.isWhiteSpace(code) && code !== 0x3e) {\n        continue;\n      }\n      token = this.getToken(item[2], '');\n\n      this.startToken();\n      startToken = this.getTagToken();\n      if (item[2] === TokenType.HTML_TAG_SCRIPT) {\n        startToken = parseScriptAttrs(startToken, this.options.jsTplTypes);\n      } else if (item[2] === TokenType.HTML_TAG_STYLE) {\n        startToken = parseStyleAttrs(startToken);\n      }\n      this.startToken();\n      contentToken = this.getToken(TokenType.HTML_RAW_TEXT, this.forward(pos - this.pos));\n      // add hasTpl flag for content token\n      contentToken.ext.hasTpl = this.hasTpl(contentToken.value);\n      this.startToken();\n      endToken = this.getTagToken();\n      token.value = startToken.value + contentToken.value + endToken.value;\n      token.ext.start = startToken;\n      token.ext.content = contentToken;\n      token.ext.end = endToken;\n      return token;\n    }\n  }\n  /**\n   * get special token\n   * @return {Object} []\n   */\n  getSpecialToken() {\n    let pos, npos, findItem, j, length, ret, i = 0, item;\n    while (i < specialTokensLength) {\n      item = specialTokens[i++];\n      // if text is not start with item[0], continue\n      if (!this.lookAt(item[0])) {\n        continue;\n      }\n      if (isArray(item[1])) {\n        pos = -1;\n        findItem = '';\n        for (j = 0, length = item[1].length; j < length; j++) {\n          npos = this.find(item[1][j]);\n          if (npos === -1) {\n            continue;\n          }\n          if (pos === -1) {\n            pos = npos;\n            findItem = item[1][j];\n          } else if (npos < pos) {\n            pos = npos;\n            findItem = item[1][j];\n          }\n        }\n        // find end special chars\n        if (findItem) {\n          length = pos + findItem.length - this.pos;\n          ret = this.text.substr(this.pos, length);\n          this.forward(length);\n          return this.getToken(item[2], ret);\n        }\n      } else {\n        ret = this.getMatched(item[0], item[1]);\n        if (ret) {\n          return this.getToken(item[2], ret);\n        }\n      }\n    }\n  }\n}\n"]}