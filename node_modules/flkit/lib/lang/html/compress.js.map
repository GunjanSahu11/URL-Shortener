{"version":3,"sources":["../../../src/lang/html/compress.js"],"names":[],"mappings":"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","file":"compress.js","sourcesContent":["import Base from '../../util/base.js';\nimport Tokenize from './tokenize.js';\nimport TokenType from '../../util/token_type.js';\nimport {\n  token2Text,\n  isTagAttrDefaultValue,\n  isTagAttrOnlyName,\n  isAttrValueNoQuote,\n  isOptionalEndTag,\n  isVoidElement,\n  isSafeTag,\n  isTag\n} from './util.js';\n\nimport CssCompress from '../css/compress.js';\n\n/**\n * compress options\n */\nconst compressOpts = {\n  'trim': false, // 去除首尾空白字符\n  'removeComment': true, // 移除注释\n  'simpleDoctype': true, // 简化doctype\n  'simpleCharset': true, // 简化charset\n  'tagToLower': true, // 小写标签名\n  'removeHtmlXmlns': true, // 移除html的命名空间\n  'removeInterTagSpace': false, // 移除标签之间的空格，非安全\n  'removeEmptyScript': false, // 移除空的script标签\n  'removeEmptyStyle': false, // 移除空的style标签\n  'removeOptionalAttrs': true, // 移除可选的属性\n  'removeAttrsQuote': true, // 移除属性值的引号\n  'removeAttrsOptionalValue': true, // 移除可选属性的值\n  'removeHttpProtocol': false, // 移除http协议\n  'removeHttpsProtocol': false, // 移除https协议\n  'removeOptionalEndEag': true, // 移除可选的结束标签\n  'optionalEndTagList': null, // 结束标签列表\n  'removeVoidElementSlash': true, // 移除单一标签最后的 /\n  'compressStyleValue': true, // 压缩标签的style值\n  'compressInlineCss': true, // 压缩内联的CSS\n  'compressInlineJs': true, // 压缩内联的JS\n  'removeInlineJsCdata': true, //\n  'compressJsTpl': true, // 压缩前端模版\n  'compressTag': true // 压缩标签\n};\n\nexport default class HtmlCompress extends Base {\n  /**\n   * constructor\n   */\n  constructor(text, options = {}) {\n    super('', options);\n    this._optText = text;\n    this.tokens = [];\n    this.isXML = false;\n\n    this.index = 0;\n    this.length = 0;\n\n    this.jsHandle = null;\n    this.cssHandle = null;\n    this.jsTplHandle = null;\n\n    this.prev = null;\n    this.next = null;\n\n    this.options = {\n      ...compressOpts,\n      ...this.options\n    };\n  }\n  /**\n   * init tokens\n   */\n  initTokens() {\n    if (typeof this._optText === 'string') {\n      const instance = new Tokenize(this._optText, this.options);\n      this.tokens = instance.run();\n    } else {\n      this.tokens = this._optText;\n    }\n    this.length = this.tokens.length;\n  }\n  /**\n   * compress common\n   */\n  compressCommon(token) {\n    // compress comment\n    if (token.commentBefore.length && this.options.removeComment) {\n      const comments = [];\n      const start = token.commentBefore[0].start;\n      let prev = null;\n      let hasSpace = token.start - token.commentBefore[token.commentBefore.length - 1].end > 0;\n      token.commentBefore.forEach(item => {\n        if (item.value.indexOf('<!--!') === 0) {\n          comments.push(item);\n        }\n        if (prev && !hasSpace) {\n          hasSpace = (item.start - prev.end) > 0;\n        }\n        prev = item;\n      });\n      token.commentBefore = comments;\n      let prevHasRightSpace = false;\n      if (this.prev && this.prev.type === TokenType.HTML_TEXT) {\n        prevHasRightSpace = /\\s$/.test(this.prev.value);\n      }\n      token.start = !prevHasRightSpace && hasSpace ? start + 1 : start;\n    }\n\n    if (!this.prev) {\n      if (token.type === TokenType.HTML_DOCTYPE || token.type === TokenType.XML_START) {\n        token.start = 0;\n        return token;\n      }\n    }\n\n    if (this.isXML) {\n      token.start = this.prev ? this.prev.end : 0;\n      return token;\n    }\n\n    // safe tags\n    const tagTypes = [\n      TokenType.HTML_TAG_START,\n      TokenType.HTML_TAG_END\n    ];\n    if (tagTypes.indexOf(token.type) > -1 && isSafeTag(token.ext.tagLowerCase)) {\n      token.start = this.prev ? this.prev.end : 0;\n    }\n\n    return token;\n  }\n  /**\n   * compress text\n   */\n  compressText(token) {\n    // can not remove extra whitespace in title tag\n    if (this.prev && this.prev.type === TokenType.HTML_TAG_START) {\n      if (this.prev.ext.tagLowerCase === 'title') {\n        const spaces = token.start - this.prev.end;\n        if (spaces) {\n          token.value = (new Array(spaces + 1)).join(' ') + token.value;\n        }\n        token.start = this.prev.end;\n        return token;\n      }\n    }\n\n    let value = token.value;\n    // 如果文本中含有//，则不去除换行等，主要是一些异步接口（JS环境）会被识别成HTML环境，如果有JS的//注释就要注意了\n    if (value.indexOf('//') > -1) {\n      return token;\n    }\n    value = value.replace(/\\s+/g, ' ');\n    // remove right space\n    if (this.options.removeInterTagSpace) {\n      value = value.replace(/\\s$/, '');\n    }\n    token.value = value;\n    return token;\n  }\n  /**\n   * compress doctype\n   */\n  compressDocType(token) {\n    if (this.options.simpleDoctype) {\n      token.value = '<!Doctype html>';\n    }\n    token.start = this.prev ? this.prev.end : 0;\n    return token;\n  }\n  /**\n   * compress charset\n   */\n  compressCharset(token) {\n    const attrs = token.ext.attrs;\n    let charset = 0;\n    let contentValue = '';\n    const flag = attrs.some(item => {\n      const value = item.value || '';\n      if (item.nameLowerCase === 'http-equiv' && value.toLowerCase() === 'content-type') {\n        charset++;\n      } else if (item.nameLowerCase === 'content' && value.indexOf('charset=') > -1) {\n        charset++;\n        contentValue = item.value;\n      } else {\n        return true;\n      }\n    });\n    if (flag) {\n      return;\n    }\n    if (charset !== 2 || !contentValue) {\n      return;\n    }\n    const reg = /charset=([\\w\\-]+)/i;\n    const matches = contentValue.match(reg);\n    if (matches && matches[1]) {\n      // token.value = `<meta charset=${matches[1]}>`;\n      token.ext.attrs = [{\n        name: 'charset',\n        value: matches[1],\n        nameLowerCase: 'charset',\n        quote: this.options.removeAttrsQuote ? '' : '\"'\n      }];\n    }\n    return token;\n  }\n  /**\n   * compress tag start\n   */\n  compressTagStart(token) {\n    if (this.isXML || !this.options.compressTag) {\n      return token;\n    }\n    const lowerTagName = token.ext.tagLowerCase;\n    if (!isTag(lowerTagName)) {\n      return token;\n    }\n    if (this.options.tagToLower) {\n      token.ext.tag = lowerTagName;\n    }\n    if (lowerTagName === 'meta' && this.options.simpleCharset) {\n      const ret = this.compressCharset(token);\n      if (ret) {\n        return ret;\n      }\n    }\n    const attrs = token.ext.attrs;\n    const retAttrs = [];\n    const options = this.options;\n    attrs.forEach(attr => {\n      if (attr.type === TokenType.TPL) {\n        const tplCompress = this.compressTpl(attr);\n        if (tplCompress) {\n          retAttrs.push(tplCompress);\n        }\n        return;\n      }\n\n      let value = attr.value;\n      const name = attr.nameLowerCase;\n\n      // remove tag attribute default value\n      if (options.removeOptionalAttrs && isTagAttrDefaultValue(name, value, lowerTagName)) {\n        return;\n      }\n\n      // remove xmlns attribute in html tag\n      if (options.removeHtmlXmlns && lowerTagName === 'html' && name === 'xmlns') {\n        return;\n      }\n\n      // tag attribute only has name, remove value\n      if (options.removeAttrsOptionalValue && isTagAttrOnlyName(name)) {\n        delete attr.value;\n        delete attr.quote;\n        retAttrs.push(attr);\n        return;\n      }\n\n      // remove value quote\n      if (options.removeAttrsQuote && isAttrValueNoQuote(value)) {\n        delete attr.quote;\n        retAttrs.push(attr);\n        return;\n      }\n\n      // remove http/https protocol prefix\n      if (name === 'href' || name === 'src') {\n        if (options.removeHttpProtocol && value.indexOf('http://') === 0) {\n          attr.value = value.slice(5);\n          retAttrs.push(attr);\n          return;\n        }\n        if (options.removeHttpsProtocol && value.indexOf('https://') === 0) {\n          attr.value = value.slice(6);\n          retAttrs.push(attr);\n          return;\n        }\n      }\n\n      // class value has extra blank chars\n      if (name === 'class' && !this.hasTpl(value)) {\n        attr.value = value.trim().split(/\\s+/).join(' ');\n        if (attr.value) {\n          retAttrs.push(attr);\n        }\n        return;\n      }\n\n      // compress style value\n      if (options.compressStyleValue && name === 'style') {\n        value = `*{${value}}`;\n        if (this.cssHandle && this.cssHandle.compress) {\n          const compressValue = this.cssHandle.compress(value);\n          attr.value = compressValue.slice(2, compressValue.length - 1);\n        } else {\n          const instance = new CssCompress(value, this.options);\n          const compressValue = instance.run();\n          attr.value = compressValue.slice(2, compressValue.length - 1);\n        }\n        retAttrs.push(attr);\n        return;\n      }\n\n      // remove last ; on event\n      if (name.indexOf('on') === 0) {\n        value = value.trim();\n        if (value[value.length - 1] === ';') {\n          attr.value = value.slice(0, value.length - 1);\n        }\n      }\n\n      retAttrs.push(attr);\n    });\n    // remove / in void element\n    if (this.options.removeVoidElementSlash && token.ext.slash) {\n      if (isVoidElement(lowerTagName)) {\n        token.ext.slash = false;\n      }\n    }\n    token.ext.attrs = retAttrs;\n    return token;\n  }\n  /**\n   * compress tag end\n   */\n  compressTagEnd(token) {\n    // </div> </div> => </div></div>\n    const tagTypes = [\n      TokenType.HTML_TAG_END,\n      TokenType.HTML_TAG_STYLE,\n      TokenType.HTML_TAG_SCRIPT\n    ];\n    if (this.prev && tagTypes.indexOf(this.prev.type) > -1) {\n      token.start = this.prev.end;\n    }\n    const tagLowerCase = token.ext.tagLowerCase;\n    if (this.isXML || !isTag(tagLowerCase)) {\n      return token;\n    }\n\n    if (this.options.removeOptionalEndEag) {\n      if (isOptionalEndTag(tagLowerCase, this.options.optionalEndTagList)) {\n        return;\n      }\n    }\n\n    if (this.options.tagToLower) {\n      token.ext.tag = tagLowerCase;\n    }\n\n    return token;\n  }\n  /**\n   * compress style\n   */\n  compressStyle(token) {\n    // remove whitespace before token\n    token.start = this.prev ? this.prev.end : 0;\n\n    if (!this.options.compressTag) {\n      return token;\n    }\n\n    const contentToken = token.ext.content;\n    const contentValue = contentToken.value.trim();\n    if (this.options.removeEmptyStyle && !contentValue) {\n      return;\n    }\n\n    let handle = this.cssHandle;\n    if (this.cssHandle && this.cssHandle.compress) {\n      handle = this.cssHandle.compress;\n    }\n    if (this.options.compressInlineCss && handle) {\n      token.ext.content = handle(contentToken, this);\n    }\n\n    token.ext.start = this.compressTagStart(token.ext.start);\n    token.ext.end = this.compressTagEnd(token.ext.end);\n    return token;\n  }\n\n  /**\n   * compress script\n   */\n  compressScript(token) {\n    // remove whitespace before token\n    token.start = this.prev ? this.prev.end : 0;\n\n    if (!this.options.compressTag) {\n      return token;\n    }\n\n    const {start, content, end} = token.ext;\n    token.ext.start = this.compressTagStart(start);\n    token.ext.end = this.compressTagEnd(end);\n    if (start.ext.isExternal) {\n      return token;\n    }\n\n    const contentValue = content.value.trim();\n    // remove empty script\n    if (this.options.removeEmptyScript && !contentValue) {\n      return;\n    }\n\n    // compress inline script\n    if (this.options.compressInlineJs && start.ext.isScript && !start.ext.isExternal) {\n      const hasTpl = this.hasTpl(contentValue);\n      let handle = this.jsHandle;\n      if (this.jsHandle && this.jsHandle.compress) {\n        handle = this.jsHandle.compress;\n      }\n      if (!hasTpl && handle) {\n        token.ext.content = handle(content, this);\n      }\n    }\n\n    // compress js tpl\n    if (start.ext.isTpl && this.options.compressJsTpl && this.jsTplHandle) {\n      token.ext.content = this.jsTplHandle(content, this);\n    }\n\n    return token;\n  }\n  /**\n   * compress tpl\n   */\n  compressTpl(token) {\n    const instance = this.getTplInstance();\n    return instance.compress(token, this);\n  }\n  /**\n   * compress token\n   */\n  compressToken(token) {\n    if (!this.prev && this.options.trim) {\n      token.start = 0;\n    }\n    token = this.compressCommon(token);\n    switch (token.type) {\n      case TokenType.HTML_DOCTYPE:\n        token = this.compressDocType(token);\n        break;\n      case TokenType.HTML_TAG_START:\n        token = this.compressTagStart(token);\n        break;\n      case TokenType.HTML_TEXT:\n        token = this.compressText(token);\n        break;\n      case TokenType.HTML_TAG_END:\n        token = this.compressTagEnd(token);\n        break;\n      case TokenType.HTML_TAG_STYLE:\n        token = this.compressStyle(token);\n        break;\n      case TokenType.HTML_TAG_SCRIPT:\n        token = this.compressScript(token);\n        break;\n      case TokenType.TPL:\n        token = this.compressTpl(token);\n        break;\n    }\n    return token;\n  }\n  /**\n   * run\n   */\n  run(retTokens = false) {\n    this.initTokens();\n\n    const firstToken = this.tokens[0];\n    if (firstToken && firstToken.type === TokenType.XML_START) {\n      this.isXML = true;\n      this.options.tagToLower = false;\n    }\n    const result = [];\n    while (this.index < this.length) {\n      if (this.index) {\n        this.prev = this.tokens[this.index - 1];\n      }\n      let token = this.tokens[this.index++];\n      this.next = this.tokens[this.index];\n\n      token = this.compressToken(token);\n      if (token) {\n        result.push(token);\n      }\n    }\n    return retTokens ? result : token2Text(result, {\n      js: this.jsHandle && this.jsHandle.stringify,\n      css: this.cssHandle && this.cssHandle.stringify\n    });\n  }\n}\n"]}