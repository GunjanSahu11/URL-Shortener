{"version":3,"sources":["../../src/util/util.js"],"names":[],"mappings":";;;;QAQgB,M,GAAA,M;QAgBA,a,GAAA,a;QAgBA,qB,GAAA,qB;;AAvChB;;;;;;;AAOO,SAAS,MAAT,CAAgB,GAAhB,EAAqB;AAC1B,MAAI,OAAO,GAAP,KAAe,QAAnB,EAA6B;AAC3B,UAAM,IAAI,KAAJ,CAAU,EAAV,CAAN;AACD;AACD,MAAM,MAAM,EAAZ;AACA,MAAM,SAAS,IAAI,MAAnB;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAApB,EAA4B,GAA5B,EAAiC;AAC/B,QAAI,IAAI,CAAJ,CAAJ,IAAc,CAAd;AACD;AACD,SAAO,GAAP;AACD;;;;;;AAMM,SAAS,aAAT,CAAuB,MAAvB,EAA+B;AACpC,MAAI,OAAO,iBAAX;AACA,SAAO,KAAP,CAAa,EAAb,EAAiB,OAAjB,CAAyB,UAAS,GAAT,EAAc;AACrC,YAAQ,cAAc,IAAI,UAAJ,CAAe,CAAf,EAAkB,QAAlB,CAA2B,EAA3B,CAAd,GAA+C,KAAvD;AACD,GAFD;AAGA,UAAQ,mCAAR;AACA,SAAO,IAAI,QAAJ,CAAa,MAAb,EAAqB,IAArB,CAAP;AACD;;;;AAIM,IAAM,sCAAe,iCAArB;;;;;AAKA,SAAS,qBAAT,CAA+B,QAA/B,EAAyC,KAAzC,EAAgD;AACrD,MAAI,CAAC,QAAL,EAAe;AACb,WAAO,MAAM,KAAN,GAAc,CAArB;AACD;AACD,MAAI,MAAM,aAAN,CAAoB,MAAxB,EAAgC;AAC9B,QAAM,mBAAa,MAAM,aAAnB,GAAkC,KAAlC,EAAN;AACA,WAAO,OAAO,IAAP,CAAY,gBAAQ;AACzB,UAAM,QAAQ,KAAK,KAAL,GAAa,SAAS,GAApC;AACA,iBAAW,IAAX;AACA,aAAO,QAAQ,CAAf;AACD,KAJM,CAAP;AAKD,GAPD,MAOO;AACL,WAAO,MAAM,KAAN,GAAc,SAAS,GAAvB,GAA6B,CAApC;AACD;AACF","file":"util.js","sourcesContent":["\nimport {whitespace} from './config.js';\n\n/**\n * string to object\n * @param  {String | Array} str []\n * @return {Object}     []\n */\nexport function toHash(str) {\n  if (typeof str === 'string') {\n    str = str.split('');\n  }\n  const ret = {};\n  const length = str.length;\n  for (let i = 0; i < length; i++) {\n    ret[str[i]] = 1;\n  }\n  return ret;\n}\n/**\n * make compare function\n * @param  {String} string []\n * @return {Function}        []\n */\nexport function makePredicate(string) {\n  let code = 'switch(code){\\n';\n  string.split('').forEach(function(chr) {\n    code += '  case 0x' + chr.charCodeAt(0).toString(16) + ':\\n';\n  });\n  code += '    return true;\\n}\\nreturn false';\n  return new Function('code', code);\n}\n/**\n * is whitespace char\n */\nexport const isWhiteSpace = makePredicate(whitespace);\n\n/**\n * check has space between tokens\n */\nexport function hasSpaceBetweenTokens(preToken, token) {\n  if (!preToken) {\n    return token.start > 0;\n  }\n  if (token.commentBefore.length) {\n    const tokens = [...token.commentBefore, token];\n    return tokens.some(item => {\n      const delta = item.start - preToken.end;\n      preToken = item;\n      return delta > 0;\n    });\n  } else {\n    return token.start - preToken.end > 0;\n  }\n}\n"]}