{"version":3,"sources":["../../src/util/tokenize.js"],"names":[],"mappings":"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","file":"tokenize.js","sourcesContent":["import Base from './base.js';\nimport {isWhiteSpace} from './util.js';\nimport {cdo, comments} from './config.js';\nimport Err from './error.js';\nimport Message from './message.js';\nimport TokenType from './token_type.js';\n\nconst lineComments = comments[0];\n\nexport default class Tokenize extends Base {\n  /**\n   * constructor\n   * @param  {String} text    []\n   * @param  {Object} options []\n   * @return {void}         []\n   */\n  constructor(text, options) {\n    super(text, options);\n    this.pos = 0;\n    this._pos = 0;\n    this.line = 0;\n    this._line = 0;\n    this.col = 0;\n    this._col = 0;\n    // this.newlineBefore = 0;\n    // this._newlineBefore = 0;\n    // this.spaceBefore = 0;\n    // this._spaceBefore = 0;\n    this.commentBefore = [];\n  }\n  /**\n   * get next char\n   * @return {Function} [next char from text]\n   */\n  next() {\n    const chr = this.text[this.pos++];\n    // 0x0a is \\n\n    if (chr.charCodeAt(0) === 0x0a) {\n      this.line++;\n      this.col = 0;\n      // this.newlineBefore++;\n    } else {\n      this.col++;\n    }\n    return chr;\n  }\n  /**\n   * forward num chars\n   * @param  {Number} i []\n   * @return {String}   [forward string]\n   */\n  forward(i) {\n    let ret = '';\n    while (i-- > 0) {\n      ret += this.next();\n    }\n    return ret;\n  }\n  /**\n   * forward to char\n   * @param  {String} chr []\n   * @return {String}     []\n   */\n  forwardChar(chr, contain) {\n    const pos = this._text.indexOf(chr, this.pos);\n    if (pos === -1) {\n      return '';\n    }\n    const str = this.forward(pos - this.pos + (contain !== false ? 1 : 0));\n    return str;\n  }\n  /**\n   * skip whitespace\n   * @return {void} []\n   */\n  skipWhiteSpace() {\n    // let whitespace = this.whitespace;\n    while (this.isWhiteSpace(this.text.charCodeAt(this.pos))) {\n      this.spaceBefore++;\n      this.next();\n    }\n  }\n  /**\n   * check char is whitespace\n   */\n  isWhiteSpace(chr) {\n    return isWhiteSpace(chr);\n  }\n  /**\n   * skip comment\n   * sub class override\n   * @return {void} []\n   */\n  skipComment() {\n\n  }\n  /**\n   * skip right space for text\n   * @param  {String} value []\n   * @return {String}       []\n   */\n  skipRightSpace(value) {\n    let length = value.length, index = length - 1;\n    let newlines = 0, spaces = 0, chr, code;\n    while (index >= 0) {\n      chr = value[index];\n      code = chr.charCodeAt(0);\n      if (this.isWhiteSpace(code)) {\n        index--;\n        spaces++;\n        if (code === 0x0a) {\n          newlines++;\n        }\n        continue;\n      }\n      break;\n    }\n    // this.newlineBefore += newlines;\n    // this.spaceBefore += spaces;\n    return value.slice(0, index + 1);\n  }\n  /**\n   * skip cdo and cdc string\n   * @return {void} []\n   */\n  skipCd() {\n    if (this.lookAt(cdo)) {\n      this.forward(4);\n      this.length -= 3;\n    }\n  }\n  /**\n   * look at string in current position\n   * @param  {String} str           []\n   * @return {Boolean}              []\n   */\n  lookAt(str) {\n    return str === this._text.substr(this.pos, str.length);\n  }\n  /**\n   * find string, support escape\n   * @param  {String} str [find string in text]\n   * @return {Number}     [string pos in text]\n   */\n  find(str, forward = 0) {\n    return this._text.indexOf(str, this.pos + forward);\n  }\n  /**\n   * throw error\n   * @param  {String} message []\n   * @param  {Number} line    []\n   * @param  {Number} col     []\n   * @return {void}         []\n   */\n  error(message, useRecord) {\n    if (useRecord) {\n      throw new Err(message, this._record.line, this._record.col);\n    } else {\n      throw new Err(message, this.line, this.col);\n    }\n  }\n  /**\n   * record line & col & pos\n   * @return {void} []\n   */\n  record() {\n    this._record = {\n      line: this.line,\n      col: this.col,\n      pos: this.pos\n      // newlineBefore: this.newlineBefore,\n      // spaceBefore: this.spaceBefore\n    };\n    return this._record;\n  }\n  /**\n   * rollback parse\n   * @return {void} []\n   */\n  rollback(record) {\n    record = record || this._record;\n    if (!record) {\n      return false;\n    }\n    this.line = record.line;\n    this.col = record.col;\n    this.pos = record.pos;\n    // this.newlineBefore = record.newlineBefore;\n    // this.spaceBefore = record.spaceBefore;\n  }\n  /**\n   * get quote text, support template syntax in quote\n   * @return {String} [quote string]\n   */\n  getQuote(options = {}) {\n    let quote = this.next(), quoteCode = quote.charCodeAt(0);\n    let ret = quote, find = false, tpl, code, chr;\n    let supportEscape = options.escape, escape = false;\n    this.record();\n    /* jshint -W084 */\n    while (this.pos < this.length) {\n      // template syntax in quote string\n      tpl = this.getTplToken();\n      if (tpl) {\n        ret += tpl.value;\n        continue;\n      }\n      chr = this.text[this.pos];\n      code = chr.charCodeAt(0);\n      if (supportEscape && (code === 0x5c || escape)) {\n        escape = !escape;\n        ret += this.next();\n        continue;\n      }\n      // chr is quote, but next chr is not\n      if (!escape && code === quoteCode) {\n        if (!options.checkNext || this.text.charCodeAt(this.pos + 1) !== code) {\n          find = true;\n          ret += this.next();\n          break;\n        }\n      }\n      ret += this.next();\n    }\n    if (!find) {\n      if (options.throwError) {\n        this.error(Message.UnMatchedQuoteChar, true);\n      } else if (options.rollback) {\n        this.rollback();\n        return {\n          value: quote,\n          find: false\n        };\n      }\n    }\n    return {\n      value: ret,\n      find: find\n    };\n  }\n  /**\n   * get matched string\n   * not supoort tpl, nested, quote\n   * @param  {String} start []\n   * @param  {String} end   []\n   * @return {String}       []\n   */\n  getMatched(start, end) {\n    if (!this.lookAt(start)) {\n      return false;\n    }\n    let startLength = start.length, endLength = end.length;\n    const pos = this.find(end, startLength);\n    // can't find end string in text\n    if (pos === -1) {\n      return false;\n    }\n    return this.forward(pos - this.pos + endLength);\n  }\n  /**\n   * get match char, such as: [], (), {}\n   * @param  {Number} startCode [start char]\n   * @param  {Number} endCode   [end char]\n   * @return {String}           [matched char]\n   */\n  getMatchedChar(startCode, endCode, options = {}) {\n    if (this._text.charCodeAt(this.pos) !== startCode) {\n      return false;\n    }\n    let code, nextCode, comment, nums = 0;\n    let ret = this.next(), chr;\n    const quote = options.quote;\n    const multi_comment = options.multi_comment;\n    const line_comment = options.line_comment;\n    const nest = options.nest;\n    let supportEscape = options.escape, escape = false;\n\n    while (this.pos < this.length) {\n      chr = this.text[this.pos];\n      code = chr.charCodeAt(0);\n      if (supportEscape && (code === 0x5c || escape)) {\n        escape = !escape;\n        ret += this.next();\n        continue;\n      }\n      if (quote && !escape && (code === 0x22 || code === 0x27)) {\n        ret += this.getQuote({\n          rollback: true\n        }).value;\n        continue;\n      }\n      if (code === 0x2f) {\n        nextCode = this.text.charCodeAt(this.pos + 1);\n        comment = '';\n        if (multi_comment && nextCode === 0x2a) {\n          comment = this.getCommentToken(1, false);\n        } else if (line_comment && nextCode === 0x2f) {\n          comment = this.getCommentToken(0, false);\n        }\n        if (comment) {\n          ret += comment.value;\n          continue;\n        }\n      }\n      if (nest && code === startCode) {\n        nums++;\n      } else if (code === endCode) {\n        if (!nest || nums === 0) {\n          ret += this.next();\n          return ret;\n        }\n        nums--;\n      }\n      ret += this.next();\n    }\n    return ret;\n  }\n  /**\n   * start token\n   * @return {void} []\n   */\n  startToken() {\n    this._line = this.line;\n    this._col = this.col;\n    this._pos = this.pos;\n    // this._newlineBefore = this.newlineBefore;\n    // this._spaceBefore = this.spaceBefore;\n  }\n  /**\n   * get template token\n   * @return {Object} []\n   */\n  getTplToken() {\n    if (!this._hasTpl) {\n      return false;\n    }\n    let length = this.ld.length, ld, rd, tplInstance = this.getTplInstance();\n    let ret, value;\n    for (let i = 0; i < length; i++) {\n      ld = this.ld[i];\n      rd = this.rd[i];\n      ret = tplInstance.getMatched(ld, rd, this);\n      if (ret) {\n        if (ret.slice(0 - rd.length) === rd) {\n          value = ret.slice(ld.length, 0 - rd.length);\n        } else {\n          value = ret.slice(ld.length);\n        }\n        return this.getToken(TokenType.TPL, ret, {\n          ld: ld,\n          rd: rd,\n          value: value\n        });\n      }\n    }\n    return false;\n  }\n  /**\n   * check next chars is template syntax\n   * @return {Boolean} []\n   */\n  isTplNext() {\n    if (!this._hasTpl) {\n      return false;\n    }\n    const length = this.ld.length;\n    for (let i = 0; i < length; i++) {\n      if (this.lookAt(this.ld[i])) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * get next token\n   * @return {Object} []\n   */\n  getNextToken() {\n    this.skipWhiteSpace();\n    this.skipComment();\n    this.startToken();\n    const token = this.getTplToken();\n    if (token !== false) {\n      return token;\n    }\n    if (this.pos >= this.length) {\n      return this.getLastToken();\n    }\n  }\n  /**\n   * get token info\n   * @param  {String} type  []\n   * @param  {String} value []\n   * @return {Object}       []\n   */\n  getToken(type, value, extra) {\n    const data = {\n      type: type,\n      value: value || '',\n      start: this._pos,\n      end: this.pos,\n      loc: {\n        start: {\n          line: this._line,\n          column: this._col\n        },\n        end: {\n          line: this.line,\n          column: this.col\n        }\n      },\n      // newlineBefore: this._newlineBefore,\n      // spaceBefore: this._spaceBefore,\n      commentBefore: this.commentBefore,\n      ext: {}\n    };\n    if (extra) {\n      for (const key in extra) {\n        data.ext[key] = extra[key];\n      }\n    }\n    // this.newlineBefore = this.spaceBefore = 0;\n    this.commentBefore = [];\n    return data;\n  }\n  /**\n   * get last token\n   * @return {Object} []\n   */\n  getLastToken() {\n    if (this.commentBefore.length) {\n      return this.getToken(TokenType.EOS);\n    }\n    return false;\n  }\n  /**\n   * get comment string\n   * @param  {String} type           []\n   * @return {Object}                []\n   */\n  getCommentToken(type, skipWhiteSpace/*, inText */) {\n    this.record();\n    let result;\n    if (type === 0) {\n      result = this.getLineComment();\n    } else {\n      const value = comments[type];\n      result = this.getMatched(value[0], value[1]);\n    }\n    if (!result) {\n      return false;\n    }\n    const data = {\n      value: result,\n      start: this._record.pos,\n      end: this.pos,\n      loc: {\n        start: {\n          line: this._record.line,\n          column: this._record.col\n        },\n        end: {\n          line: this.line,\n          column: this.col\n        }\n      }\n      // newlineBefore: this._record.newlineBefore,\n      // spaceBefore: this._record.spaceBefore\n    };\n    // if (inText) {\n    //   //data.newlineBefore = data.spaceBefore = 0;\n    // }\n    // this.newlineBefore = this.spaceBefore = 0;\n    if (skipWhiteSpace !== false) {\n      this.skipWhiteSpace();\n    }\n    return data;\n  }\n  /**\n   * get line comment\n   * @return {Object} []\n   */\n  getLineComment() {\n    if (!this.lookAt(lineComments[0])) {\n      return;\n    }\n    let ret = this.forward(lineComments[0].length);\n    let chr, code;\n    while (this.pos < this.length) {\n      chr = this.text[this.pos];\n      code = chr.charCodeAt(0);\n      if (code === 0x0a) {\n        break;\n      }\n      ret += this.next();\n    }\n    return ret;\n  }\n  /**\n   * run\n   * @return {Array} [text tokens]\n   */\n  run() {\n    let ret = [], token;\n    while (token = this.getNextToken()) {\n      ret.push(token);\n    }\n    return ret;\n  }\n}\n"]}