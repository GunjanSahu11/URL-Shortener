{"version":3,"sources":["../../src/util/util_ext.js"],"names":[],"mappings":";;;;;;QAOgB,W,GAAA,W;QAkBA,c,GAAA,c;;AAzBhB;;;;AACA;;;;;;AAEA,IAAM,uBAAuB,uBAAiB,EAAjB,CAA7B;;;;AAIO,SAAS,WAAT,CAAqB,IAArB,EAA2B,KAA3B,EAAkC,UAAlC,EAA8C;AACnD,MAAM,QAAQ,qBAAqB,QAArB,CAA8B,IAA9B,EAAoC,KAApC,CAAd;AACA,QAAM,KAAN,GAAc,aAAa,WAAW,KAAxB,GAAgC,CAA9C;AACA,QAAM,GAAN,GAAY,MAAM,KAAN,GAAc,MAAM,MAAhC;AACA,SAAO,KAAP;AACD;;;;;AAKD,IAAM,QAAQ;AACZ,SAAO,qBAAU,cADL;AAEZ,UAAQ,qBAAU;AAFN,CAAd;AAIA,IAAM,0BACH,qBAAU,cADP,IACwB,OADxB,QAEH,qBAAU,eAFP,IAEyB,QAFzB,QAAN;AAIO,SAAS,cAAT,CAAwB,IAAxB,EAA8B,KAA9B,EAAqC,UAArC,EAAiD;AACtD,SAAO,MAAM,IAAN,KAAe,IAAtB;AACA,MAAI,eAAJ;AACA,MAAI,MAAM,OAAN,CAAc,KAAd,CAAJ,EAA0B;AACxB,aAAS,KAAT;AACA,YAAQ,EAAR;AACD;AACD,MAAM,QAAQ,YAAY,IAAZ,EAAkB,KAAlB,EAAyB,UAAzB,CAAd;AACA,MAAM,UAAU,KAAK,IAAL,CAAhB;AACA,MAAM,aAAa,YAAY,qBAAU,cAAtB,QAA0C,OAA1C,SAAqD,KAArD,UAA+D,OAA/D,QAA2E,UAA3E,CAAnB;AACA,aAAW,GAAX,GAAiB;AACf,WAAO,EADQ;AAEf,SAAK,OAFU;AAGf,kBAAc;AAHC,GAAjB;AAKA,MAAM,eAAe,YAAY,qBAAU,aAAtB,EAAqC,KAArC,EAA4C,UAA5C,CAArB;AACA,eAAa,GAAb,GAAmB;AACjB;AADiB,GAAnB;AAGA,MAAM,WAAW,YAAY,qBAAU,YAAtB,SAAyC,OAAzC,QAAqD,YAArD,CAAjB;AACA,WAAS,GAAT,GAAe;AACb,SAAK,OADQ;AAEb,kBAAc;AAFD,GAAf;AAIA,QAAM,GAAN,GAAY;AACV,WAAO,UADG;AAEV,aAAS,YAFC;AAGV,SAAK;AAHK,GAAZ;AAKA,SAAO,KAAP;AACD","file":"util_ext.js","sourcesContent":["import BaseTokenize from './tokenize.js';\nimport TokenType from './token_type.js';\n\nconst baseTokenizeInstance = new BaseTokenize('');\n/**\n * create token\n */\nexport function createToken(type, value, referToken) {\n  const token = baseTokenizeInstance.getToken(type, value);\n  token.start = referToken ? referToken.start : 0;\n  token.end = token.start + value.length;\n  return token;\n}\n\n/**\n * create raw token, such as: style or script\n */\nconst types = {\n  style: TokenType.HTML_TAG_STYLE,\n  script: TokenType.HTML_TAG_SCRIPT\n};\nconst tags = {\n  [TokenType.HTML_TAG_STYLE]: 'style',\n  [TokenType.HTML_TAG_SCRIPT]: 'script'\n};\nexport function createRawToken(type, value, referToken) {\n  type = types[type] || type;\n  let tokens;\n  if (Array.isArray(value)) {\n    tokens = value;\n    value = '';\n  }\n  const token = createToken(type, value, referToken);\n  const tagName = tags[type];\n  const startToken = createToken(TokenType.HTML_TAG_STYLE, `<${tagName}>${value}</${tagName}>`, referToken);\n  startToken.ext = {\n    attrs: [],\n    tag: tagName,\n    tagLowerCase: tagName\n  };\n  const contentToken = createToken(TokenType.HTML_RAW_TEXT, value, startToken);\n  contentToken.ext = {\n    tokens\n  };\n  const endToken = createToken(TokenType.HTML_TAG_END, `</${tagName}>`, contentToken);\n  endToken.ext = {\n    tag: tagName,\n    tagLowerCase: tagName\n  };\n  token.ext = {\n    start: startToken,\n    content: contentToken,\n    end: endToken\n  };\n  return token;\n}\n"]}